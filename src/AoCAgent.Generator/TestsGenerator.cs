using System.Text;
using mazharenko.AoCAgent.Generator.Mics;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace mazharenko.AoCAgent.Generator;

[Generator(LanguageNames.CSharp)]
internal class TestsGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var nunitReferencedProvider =
			context.CompilationProvider.Select((c, _) =>
				c.ReferencedAssemblyNames.Any(ai => ai.Name.Equals("NUnit.Framework", StringComparison.OrdinalIgnoreCase))
			);

		var testFixtureProvider =
			context.SyntaxProvider.ForAttributeWithMetadataName(
					typeof(GenerateTestsAttribute).FullName!,
					(n, _) =>
						n is ClassDeclarationSyntax c
						&& c.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)),
					(c, _) => (ClassDeclarationSyntax)c.TargetNode)
				.Collect()
				.Combine(nunitReferencedProvider);
		
		context.RegisterSourceOutput(testFixtureProvider, (productionContext, x) =>
		{
			var (testFixtures, nunitReferenced) = x;
			if (testFixtures.IsEmpty)
				return;
			
			if (!nunitReferenced)
			{
				productionContext.ReportDiagnostic(Diagnostic.Create(Diagnostics.NoTestFrameworkReference, testFixtures[0].GetLocation()));
				return;
			}
			
			productionContext.AddSource($"{testFixtures[0].Identifier.ValueText}.g.cs", SourceText.From(
				$$"""
				{{AutoGeneratedComment}}
				{{RestoreNullableString}}
				namespace {{testFixtures[0].GetContainingNamespace()}};
				using mazharenko.AoCAgent;
				using mazharenko.AoCAgent.Base;
				using mazharenko.AoCAgent.GeneratedTests;

				{{CodeGeneratedAttribute.AsSyntax}}
				[ExampleTestsSource]
				internal partial class {{testFixtures[0].Identifier.ValueText}}
				{
					public object TestPart(IExample<object> example)
					{
						var result = example.Run();
						return result;
					}
				}
				""", Encoding.UTF8)
			);
			
			productionContext.AddSource("ExampleTestsSourceAttribute.g.cs", SourceText.From(
				$$"""
{{AutoGeneratedComment}}
{{RestoreNullableString}}
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using NUnit.Framework.Internal;
using NUnit.Framework.Internal.Builders;
using mazharenko.AoCAgent;
using mazharenko.AoCAgent.Base;
using System.Reflection;
				
namespace mazharenko.AoCAgent.GeneratedTests;

[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
{{CodeGeneratedAttribute.AsString}}
internal class ExampleTestsSourceAttribute : NUnitAttribute, IFixtureBuilder
{
	public IEnumerable<TestSuite> BuildFrom(ITypeInfo typeInfo)
	{
		var years = new mazharenko.AoCAgent.GeneratedRunner.YearCollection();
		if (years.Count == 1)
			return BuildFrom(years[0], typeInfo, false);
		return years.SelectMany(year => BuildFrom(year, typeInfo, true));
	}

	private IEnumerable<TestSuite> BuildFrom(YearBase year, ITypeInfo typeInfo, bool includeYear)
	{
		var b = new NUnitTestCaseBuilder();
		var method = typeInfo.GetMethods(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance).Single();
		foreach (var (day, part1, part2) in year.Days)
		{
			var examples1 = part1.Part.GetExamples().ToArray();
			var examples2 = part2.Part.GetExamples().ToArray();
			if (examples1.Length == 0 && examples2.Length == 0)
				continue;
			var fixtureName = includeYear ? $"Year{year.Year}_Day{day:00}" : $"Day{day:00}";
			var dayFixture = new TestFixture(typeInfo)
			{
				Name = fixtureName,
				FullName = typeInfo.Namespace + "." + fixtureName
			};
			foreach (var example in examples1)
			{
				var t = b.BuildTestMethod(method, dayFixture, new TestCaseParameters(
					new object[] { example.Example }
				)
				{
					ExpectedResult = example.Example.Expectation,
					TestName = $"{fixtureName}_Part1_Should_Solve_{example.Name}"
				});
				dayFixture.Add(t);
			}

			foreach (var example in examples2)
			{
				var t = b.BuildTestMethod(method, dayFixture, new TestCaseParameters(
					new object[] { example.Example }
				)
				{
					ExpectedResult = example.Example.Expectation,
					TestName = $"{fixtureName}_Part2_Should_Solve_{example.Name}"
				});
				dayFixture.Add(t);
			}

			yield return dayFixture;
		}
	}
}

""", Encoding.UTF8)
			);
		});

	}
}