using System.Collections.Immutable;
using System.Text;
using mazharenko.AoCAgent.Generator.Mics;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace mazharenko.AoCAgent.Generator;

[Generator(LanguageNames.CSharp)]
internal class TestsGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var nunitReferencedProvider =
			context.CompilationProvider.Select((c, _) =>
				c.ReferencedAssemblyNames.Any(ai => ai.Name.Equals("NUnit.Framework", StringComparison.OrdinalIgnoreCase))
			);

		var testExampleFixtureProvider =
			context.SyntaxProvider.ForAttributeWithMetadataName(
					typeof(GenerateExampleTestsAttribute).FullName!,
					(n, _) =>
						n is ClassDeclarationSyntax c
						&& c.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)),
					(c, _) => (ClassDeclarationSyntax)c.TargetNode)
				.Collect()
				.Combine(nunitReferencedProvider);

		var testInputFixtureProvider =
			context.SyntaxProvider.ForAttributeWithMetadataName(
					typeof(GenerateInputTestsAttribute).FullName!,
					(n, _) =>
						n is ClassDeclarationSyntax c
						&& c.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)),
					(c, _) => (ClassDeclarationSyntax)c.TargetNode)
				.Collect()
				.Combine(nunitReferencedProvider);
		
		context.RegisterSourceOutput(testExampleFixtureProvider, (productionContext, x) =>
		{
			var (testFixtures, nunitReferenced) = x;
			if (testFixtures.IsEmpty)
				return;
			
			if (!nunitReferenced)
			{
				productionContext.ReportDiagnostic(Diagnostic.Create(Diagnostics.NoTestFrameworkReference, testFixtures[0].GetLocation()));
				return;
			}
			
			GenerateExampleTestFixture(productionContext, testFixtures);
		});

		context.RegisterSourceOutput(testInputFixtureProvider, (productionContext, x) =>
		{
			var (testFixtures, nunitReferenced) = x;
			if (testFixtures.IsEmpty)
				return;
			
			if (!nunitReferenced)
			{
				productionContext.ReportDiagnostic(Diagnostic.Create(Diagnostics.NoTestFrameworkReference, testFixtures[0].GetLocation()));
				return;
			}

			productionContext.AddSource("PartInputCaseData.g.cs", SourceText.From(
				"public record PartInputCaseData(int Day, int Part, string Expectation);", Encoding.UTF8
			));
			
			GenerateInputTestsSourceAttribute(productionContext);
			
			foreach (var testFixture in testFixtures)
			{
				GenerateInputTestFixture(productionContext, testFixture);
			}
		});
	}

	private static void GenerateInputTestFixture(SourceProductionContext productionContext, ClassDeclarationSyntax testFixture)
	{
		productionContext.AddSource($"{testFixture.Identifier.ValueText}.g.cs", SourceText.From(
			$$"""
			  {{AutoGeneratedComment}}
			  {{RestoreNullableString}}
			  namespace {{testFixture.GetContainingNamespace()}};
			  using System.IO;
			  using NUnit.Framework;
			  using mazharenko.AoCAgent;
			  using mazharenko.AoCAgent.Base;
			  using mazharenko.AoCAgent.GeneratedTests;

			  {{CodeGeneratedAttribute.AsSyntax}}
			  [InputTestsSource]
			  partial class {{testFixture.Identifier.ValueText}}
			  {
			  	public string TestPart(IPart part, string inputPath)
			  	{
			  		if (!File.Exists(inputPath))
			  			throw new InconclusiveException($"{inputPath} file was not found");
			  
			  		var input = File.ReadAllText(inputPath);
			  		var result = part.SolveString(input);
			  		return result;
			  }

			  }
			  """, Encoding.UTF8)
		);
	}
	private static void GenerateInputTestsSourceAttribute(SourceProductionContext productionContext)
	{
		productionContext.AddSource("InputTestsSourceAttribute.g.cs", SourceText.From(
			$$$"""
			{{{AutoGeneratedComment}}}
			{{{RestoreNullableString}}}
			using System;
			using System.Collections;
			using System.Collections.Generic;
			using System.Linq;
			using System.Reflection;
			using mazharenko.AoCAgent.Base;
			using mazharenko.AoCAgent.Generator;
			using NUnit.Framework;
			using NUnit.Framework.Interfaces;
			using NUnit.Framework.Internal;
			using NUnit.Framework.Internal.Builders;

			namespace mazharenko.AoCAgent.GeneratedTests;

			[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
			internal class InputTestsSourceAttribute : NUnitAttribute, IFixtureBuilder
			{
				public IEnumerable<TestSuite> BuildFrom(ITypeInfo typeInfo)
				{
					var sourceAttributes = typeInfo.GetCustomAttributes<GenerateInputTestsAttribute>(true);
					var cases =
						sourceAttributes.Select(a => (a.Year, cases: GetCases(typeInfo, a) ?? Enumerable.Empty<PartInputCaseData>()))
							.SelectMany(x => x.cases.Select(@case => (x.Year, @case)))
							.ToList();
					
					var years = new mazharenko.AoCAgent.GeneratedRunner.YearCollection();
			
					if (years.Count == 1)
					{
						var singleYearCases =
							cases.Where(x => !x.Year.HasValue || x.Year.Value == years[0].Year).Select(x => x.@case);
						return BuildFrom(years[0], typeInfo, singleYearCases, false).ToList();
					}
			
					return
						years.GroupJoin(cases, year => year.Year, x => x.Year,
								(year, x) => BuildFrom(year, typeInfo, x.Select(xx => xx.@case), true))
							.SelectMany(x => x)
							.ToList();
				}
			
				IEnumerable<PartInputCaseData>? GetCases(ITypeInfo typeInfo, GenerateInputTestsAttribute generateAttribute)
				{
					var sourceType = generateAttribute.SourceType ?? typeInfo.Type;
					var sourceName = generateAttribute.SourceName;
					// Handle Type implementing IEnumerable separately
					if (sourceName == null)
						return (Reflect.Construct(sourceType) as IEnumerable)?.OfType<PartInputCaseData>();
			
					var members = sourceType.GetMemberIncludingFromBase(sourceName,
						BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance);
			
					if (members.Length != 1)
						return null;
			
					var member = members[0];
			
					var field = member as FieldInfo;
					if (field != null && field.IsStatic)
						return ((IEnumerable)field.GetValue(null)!).OfType<PartInputCaseData>();
			
					var property = member as PropertyInfo;
					if (property != null && property.GetGetMethod(true)!.IsStatic)
						return ((IEnumerable)property.GetValue(null, null)!).OfType<PartInputCaseData>();
			
					var m = member as MethodInfo;
					if (m != null && m.IsStatic)
						return
							((IEnumerable)m.Invoke(null, null)!).OfType<PartInputCaseData>();
			
					return null;
				}
			
				private IEnumerable<TestSuite> BuildFrom(YearBase year, ITypeInfo typeInfo, IEnumerable<PartInputCaseData> cases, bool includeYear)
				{
					var b = new NUnitTestCaseBuilder();
					var method = typeInfo.GetMethods(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance).Single();

					foreach (var dayCases in cases.ToLookup(@case => @case.Day))
					{
						var dayNum = dayCases.Key;
						
						var fixtureName = includeYear ? $"Year{year.Year}_Day{dayNum:00}" : $"Day{dayNum:00}_InputTests";
						var dayFixture = new TestFixture(typeInfo)
						{
							Name = fixtureName,
							FullName = typeInfo.Namespace + "." + fixtureName
						};
						foreach (var (_, partNum, expectation) in dayCases)
						{
							var part = year.Parts.FirstOrDefault(p => p.Day == dayNum && p.PartNum == partNum);
							if (part is null) continue;

							var test = b.BuildTestMethod(method, dayFixture, new TestCaseParameters(
								new object[] { part.Part, includeYear ? $"inputs/year{year.Year}/input{dayNum:00}.txt" : $"inputs/input{dayNum:00}.txt" }
							)
							{
								ExpectedResult = expectation,
								TestName = $"{fixtureName}_Part{partNum}_Should_Solve_Input({{1}})"
							});
							dayFixture.Add(test);
						}
						
						yield return dayFixture;
					}
				}
			}
			""", Encoding.UTF8
		));
	}

	private static void GenerateExampleTestFixture(SourceProductionContext productionContext, ImmutableArray<ClassDeclarationSyntax> testFixtures)
	{
		productionContext.AddSource($"{testFixtures[0].Identifier.ValueText}.g.cs", SourceText.From(
			$$"""
			  {{AutoGeneratedComment}}
			  {{RestoreNullableString}}
			  namespace {{testFixtures[0].GetContainingNamespace()}};
			  using mazharenko.AoCAgent;
			  using mazharenko.AoCAgent.Base;
			  using mazharenko.AoCAgent.GeneratedTests;

			  {{CodeGeneratedAttribute.AsSyntax}}
			  [ExampleTestsSource]
			  partial class {{testFixtures[0].Identifier.ValueText}}
			  {
			  	public object TestPart(IExample example)
			  	{
			  		var result = example.Run();
			  		return result;
			  	}
			  }
			  """, Encoding.UTF8)
		);

		productionContext.AddSource("ExampleTestsSourceAttribute.g.cs", SourceText.From(
			$$"""
			{{AutoGeneratedComment}}
			{{RestoreNullableString}}
			using NUnit.Framework;
			using NUnit.Framework.Interfaces;
			using NUnit.Framework.Internal;
			using NUnit.Framework.Internal.Builders;
			using mazharenko.AoCAgent;
			using mazharenko.AoCAgent.Base;
			using System.Reflection;
			using System;
			using System.Linq;
			using System.Collections.Generic;
						
			namespace mazharenko.AoCAgent.GeneratedTests;

			[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
			{{CodeGeneratedAttribute.AsString}}
			internal class ExampleTestsSourceAttribute : NUnitAttribute, IFixtureBuilder
			{
				public IEnumerable<TestSuite> BuildFrom(ITypeInfo typeInfo)
				{
					var years = new mazharenko.AoCAgent.GeneratedRunner.YearCollection();
					if (years.Count == 1)
						return BuildFrom(years[0], typeInfo, false);
					return years.SelectMany(year => BuildFrom(year, typeInfo, true));
				}

				private IEnumerable<TestSuite> BuildFrom(YearBase year, ITypeInfo typeInfo, bool includeYear)
				{
					var b = new NUnitTestCaseBuilder();
					var method = typeInfo.GetMethods(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance).Single();
					foreach (var day in year.Parts.ToLookup(x => x.Day))
					{
						var fixtureName = includeYear ? $"Year{year.Year}_Day{day.Key:00}" : $"Day{day.Key:00}_ExampleTests";
						var dayFixture = new TestFixture(typeInfo)
						{
							Name = fixtureName,
							FullName = typeInfo.Namespace + "." + fixtureName
						};
						foreach (var runnerPart in day)
						{
							var examples = runnerPart.Part.GetExamples();

							foreach (var example in examples)
							{
								var t = b.BuildTestMethod(method, dayFixture, new TestCaseParameters(
									new object[] { example.Example }
								)
								{
									ExpectedResult = example.Example.Expectation,
									TestName = $"{fixtureName}_Part{runnerPart.PartNum}_Should_Solve_{example.Name}"
								});
								
								dayFixture.Add(t);
							}
						}
						if (dayFixture.HasChildren)
							yield return dayFixture;
					}
				}
			}

			""", Encoding.UTF8)
		);
	}
}