using System.Collections.Immutable;
using System.Text;
using mazharenko.AoCAgent.Generator.Mics;
using mazharenko.AoCAgent.Generator.Sources;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace mazharenko.AoCAgent.Generator;

internal partial class DaysGenerator
{
	private void GenerateYearCollection(SourceProductionContext productionContext, ImmutableArray<YearClass> years)
	{
		productionContext.CancellationToken.ThrowIfCancellationRequested();
		var newClass =
			ClassDeclaration("YearCollection")
				.AddAttributeLists(CodeGeneratedAttribute.AsSyntax)
				.AddModifiers(Token(SyntaxKind.PublicKeyword))
				.AddBaseListTypes(
					SimpleBaseType(ParseTypeName("System.Collections.ObjectModel.ReadOnlyCollection<YearBase>"))
				)
				.AddMembers(
					ConstructorDeclaration("YearCollection")
						.AddModifiers(Token(SyntaxKind.PublicKeyword))
						.WithInitializer(
							ConstructorInitializer(SyntaxKind.BaseConstructorInitializer)
								.AddArgumentListArguments(
									Argument(
										ObjectCreationExpression(ParseTypeName("System.Collections.Generic.List<YearBase>"))
											.WithInitializer(
												InitializerExpression(SyntaxKind.CollectionInitializerExpression)
													.WithExpressions(
														SeparatedList<ExpressionSyntax>(
															years.Select(year => year.FullName)
																.Select(year => ObjectCreationExpression(ParseName(year)).WithArgumentList(ArgumentList()))
														)
													)
											)
									)
								)
						).WithBody(Block())
				);

		var newRoot = CompilationUnit()
			.AddDefaultUsings()
			.AddMembers(
				FileScopedNamespaceDeclaration(IdentifierName("mazharenko.AoCAgent.GeneratedRunner"))
					.AddMembers(newClass)
			).WithLeadingTrivia(
				AutoGeneratedComment,
				RestoreNullable
			);
		
		productionContext.AddSource("YearCollection.g.cs", SourceText.From(
			newRoot.NormalizeWhitespace(indentation: "\t").ToFullString(),
			Encoding.UTF8
		));
	}
}