using System.Text;
using mazharenko.AoCAgent.Generator.Mics;
using mazharenko.AoCAgent.Generator.Sources;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace mazharenko.AoCAgent.Generator;

internal partial class DaysGenerator
{
	private void GenerateBaseTypes(SourceProductionContext productionContext, DaySource day)
	{
		productionContext.CancellationToken.ThrowIfCancellationRequested();
		
		var ns = day.Syntax.GetContainingNamespace();

		var dayWithBase =
			ClassDeclaration(day.Syntax.Identifier)
				.AddAttributeLists(CodeGeneratedAttribute.AsSyntax)
				.AddAttributeLists(
					AttributeList(
						SingletonSeparatedList(
							Attribute(ParseName("JetBrains.Annotations.UsedImplicitly"))
						)
					)
				)
				.AddModifiers(
					Token(SyntaxKind.PartialKeyword)
				).WithMembers(
					List(
							GenerateDayExampleTypes(day)
								.Concat(GeneratePartDeclarations("Part1", day.Part1, day))
								.Concat(GeneratePartDeclarations("Part2", day.Part2, day))
					)
				);
		var newRoot =
			CompilationUnit()
				.AddDefaultUsings()
				.WithMembers(
					ns is null
						? SingletonList<MemberDeclarationSyntax>(dayWithBase)
						: SingletonList<MemberDeclarationSyntax>(
							NamespaceDeclaration(ns)
								.AddMembers(
									dayWithBase
								)
						)
				).WithLeadingTrivia(
					AutoGeneratedComment,
					RestoreNullable
				);
		
		productionContext.AddSource($"{day.Year}.{day.Syntax.Identifier.ValueText}.Base.g.cs", SourceText.From(
			newRoot.NormalizeWhitespace(indentation: "\t").ToFullString(),
			Encoding.UTF8
		));
	}
	
	private static IEnumerable<MemberDeclarationSyntax> GeneratePartMembers(PartSource part, DaySource day)
	{
		yield return ParseMemberDeclaration(
			$$"""
			public Settings Settings { get; } = new Settings 
				{
					BypassNoExamples = {{(part.BypassNoExamples ? "true" : "false")}},
					ManualInterpretation = {{(part.ManualInterpretation ? "true" : "false")}}
				};
			""")!;
		
		if (part.IsStringRes && part.ResType.NullableAnnotation != NullableAnnotation.Annotated)
		{
			yield return ParseMemberDeclaration(
				"""
				public override string Format(string res) => res;
				"""
			)!;
		}

		var examples =
			part.PartClass.Members.OfType<FieldDeclarationSyntax>()
				.Where(field => field.Declaration.Type.ToString() == "Example")
				.SelectMany(exampleField => exampleField.Declaration.Variables)
				.ToList();

		var dayExamples = day.Syntax.Members.OfType<FieldDeclarationSyntax>()
			.Where(field => field.Declaration.Type.ToString() == "Example")
			.SelectMany(exampleField => exampleField.Declaration.Variables)
			.ToList();

		if (examples.Count == 0 && dayExamples.Count == 0)
			yield return MethodDeclaration(
					ParseTypeName("System.Collections.Generic.IEnumerable<NamedExample>"),
					Identifier("GetExamples")
				).AddModifiers(Token(SyntaxKind.PublicKeyword))
				.WithBody(Block(
					YieldStatement(SyntaxKind.YieldBreakStatement)
				));
		else
		{
			var dayExampleStatements = dayExamples.Select(exampleVariable =>
			{
				var castedReference =
						MemberAccessExpression(
							SyntaxKind.SimpleMemberAccessExpression,
					ParenthesizedExpression(
							CastExpression(
								IdentifierName(day.Syntax.Identifier),
								ThisExpression())),
							IdentifierName(exampleVariable.Identifier)
						);
				return IfStatement(
						MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, castedReference, IdentifierName("Initialized")),
					YieldStatement(SyntaxKind.YieldReturnStatement,
						ObjectCreationExpression(ParseTypeName("NamedExample"))
							.WithArgumentList(ArgumentList(
								SeparatedList(new ExpressionSyntax[]
								{
									LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(exampleVariable.Identifier.ValueText)),
									CastExpression(
										ParseTypeName("IExample"),
										castedReference
									)
								}.Select(Argument))
							))
					)
				);
			});
			var partExampleStatements =
				examples.Select(exampleVariable =>
					YieldStatement(SyntaxKind.YieldReturnStatement,
						ObjectCreationExpression(ParseTypeName("NamedExample"))
							.WithArgumentList(ArgumentList(
								SeparatedList(new ExpressionSyntax[]
								{
									LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(exampleVariable.Identifier.ValueText)),
									CastExpression(
										ParseTypeName("IExample"),
										IdentifierName(exampleVariable.Identifier)
									)
								}.Select(Argument))
							))
					)).Cast<StatementSyntax>().ToArray();
			
			yield return MethodDeclaration(
					ParseTypeName("System.Collections.Generic.IEnumerable<NamedExample>"),
					Identifier("GetExamples")
				).AddModifiers(Token(SyntaxKind.PublicKeyword))
				.WithBody(Block(
					List(
						dayExampleStatements.Concat(partExampleStatements).ToList()
					)
				));
		}

		yield return ParseMemberDeclaration(
			$$"""
			public string SolveString(string input)
			{
				var parsedInput = {{(part.ManualInput ? "ManualInput()" : "Parse(input)")}};
				return Format(Solve(parsedInput));
			}
			"""
		)!;

		yield return GeneratePartExampleType(part);
		
		yield return ParseMemberDeclaration(
			$$"""
			private void Expect(Day{{day.Number:00}}.Example example, {{part.ResType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} expectation)
			{
				example.Init(new Example(example.Input, expectation));
			}
			""")!;
	}
	
	private static MemberDeclarationSyntax GeneratePartExampleType(PartSource part)
	{
		var exampleInputType = part.ManualInput ? part.InputType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) : "string";
		return ParseMemberDeclaration(
			$$"""
			private new record Example : IExample
			{
				public {{exampleInputType}} Input { get;}
				public object Expectation { get; }
				private {{part.ResType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} expectationTyped;
				public Example({{exampleInputType}} input, {{part.ResType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} expectation)
				{
					Input = input;
					Expectation = expectation;
					expectationTyped = expectation;
				}
				private string expectationFormatted = null!;
				private static {{part.PartType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} part = new {{part.PartType.ToDisplayString()}}();
				public object Run()
				{
					var parsedInput = {{(part.ManualInput ? "Input" : "part.Parse(Input)")}};
					return part.Solve(parsedInput);
				}
				public object RunFormat(out string formatted)
				{
					var parsedInput = {{(part.ManualInput ? "Input" : "part.Parse(Input)")}};
					var res = part.Solve(parsedInput);
					formatted = part.Format(res);
					return res;
				}
				public string ExpectationFormatted => expectationFormatted ??= part.Format(expectationTyped);
			}
			"""
		)!;
	}

	private static IEnumerable<MemberDeclarationSyntax> GenerateDayExampleTypes(DaySource day)
	{
		var part = day.Part1;
		var exampleInputType = part.ManualInput ? part.InputType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) : "string";
		yield return ParseMemberDeclaration(
			$$"""
			private record Example({{exampleInputType}} Input) : DayExample<{{exampleInputType}}>(Input), IExample
			{
			}
			"""
		)!;
	}

	private static IEnumerable<MemberDeclarationSyntax> GenerateIPartMembers(PartSource part)
	{
		yield return ParseMemberDeclaration(
			$$"""
			  {{part.ResType.ToDisplayString()}} Solve({{part.InputType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} input);
			  """
		)!;

		yield return ParseMemberDeclaration(
			$$"""
			  string Format({{part.ResType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} res);
			  """
		)!;

		if (!part.ManualInput)
			yield return ParseMemberDeclaration(
				$$"""
				  {{part.InputType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} Parse(string input);
				  """
			)!;
		else
			yield return ParseMemberDeclaration(
				$$"""
				  {{part.InputType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} ManualInput();
				  """
			)!;
	}

	private static IEnumerable<MemberDeclarationSyntax> GeneratePartBaseMembers(PartSource part)
	{
		yield return ParseMemberDeclaration(
			$$"""
			  public virtual string Format({{part.ResType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} res) => res!.ToString()!;
			  """
		)!;

		if (part is { ManualInput: false, IsStringInput: true })
		{
			yield return ParseMemberDeclaration(
				$"""
				public virtual {part.InputType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} Parse(string input) => input.Trim();
				""")!;
		}
	}
	
	private static IEnumerable<TypeDeclarationSyntax> GeneratePartDeclarations(string identifier, PartSource part, DaySource day)
	{
		yield return InterfaceDeclaration($"I{identifier}")
			.AddModifiers(Token(SyntaxKind.PrivateKeyword))
			.AddBaseListTypes(SimpleBaseType(IdentifierName("IPart")))
			.WithMembers(
				List(GenerateIPartMembers(part))
			);
		yield return ClassDeclaration($"{identifier}Base")
			.AddBaseListTypes(
				SimpleBaseType(IdentifierName($"Day{day.Number:00}"))
			)
			.AddModifiers(Token(SyntaxKind.AbstractKeyword))
			.AddModifiers(part.PartClass.Modifiers.Where(m =>
				m.Kind() is SyntaxKind.PublicKeyword
					or SyntaxKind.ProtectedKeyword
					or SyntaxKind.PrivateKeyword
					or SyntaxKind.InternalKeyword
			).ToArray())
			.WithMembers(
				List(GeneratePartBaseMembers(part))
			);
		yield return ClassDeclaration(identifier)
			.AddModifiers(Token(SyntaxKind.PartialKeyword))
			.AddBaseListTypes(
				SimpleBaseType(IdentifierName($"{identifier}Base")),
				SimpleBaseType(IdentifierName($"I{identifier}"))
			).WithMembers(
				List(
					GeneratePartMembers(part, day)
				)
			);
	}
}